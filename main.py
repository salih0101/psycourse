from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
import inline_buttons
from List_of_courses.list_course import *
from config import CHANNEL_ID
import types
import config
from settings import *
import asyncio

from states import Uz_Settings

bot = Bot(config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

NOTSUB_MESSAGE = '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–µ—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª'


def check_sub_channel(chat_member):
    if chat_member['status'] != 'left':
        return True
    else:
        return False


@dp.message_handler(commands=["start"])
async def start_message(message: types.Message):
    user_id = message.from_user.id
    checker = database.check_user(user_id)

    if checker:
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ',
                             reply_markup=btns.trial_time_kb())

    else:

        channel_id = CHANNEL_ID
        chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if check_sub_channel(chat_member):
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è!",
                reply_markup=btns.ReplyKeyboardMarkup())
            await UserRegistration.getting_name_state.set()

        else:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                reply_markup=inline_buttons.sub_channel())

@dp.message_handler(state=UserRegistration.getting_name_state)
async def get_name(message, state=UserRegistration.getting_name_state):
    user_answer = message.text

    await state.update_data(name=user_answer)
    await message.answer("–ò–º—è —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!",
                         reply_markup=btns.phone_number_kb())

    await UserRegistration.getting_phone_number.set()


@dp.message_handler(state=UserRegistration.getting_phone_number, content_types=['text', 'contact'])
async def get_number(message: types.Message, state: FSMContext):
    user_answer = message.text

    if message.content_type == 'text':
        user_answer = message.text

        if not user_answer.replace('+', '').isdigit():
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            return

    elif message.content_type == 'contact':
        user_answer = message.contact.phone_number

    await state.update_data(number=user_answer)
    await message.answer("–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª! –í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.",
                         reply_markup=btns.main_menu_kb())


    all_info = await state.get_data()
    user_id = message.from_user.id
    name = all_info.get("name")
    phone_number = all_info.get("number")
    times = all_info.get("time_sub")
    end_subb = all_info.get("end_sub")
    gender = user_answer
    user_status = all_info.get("status")
    price = all_info.get("amount_sub")


    database.add_user(user_id, name, phone_number, times, end_subb, gender, user_status, price)


    admin_user_id = 5928000362
    notification_message = (
        f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n"
        f"–ò–º—è: {name}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n")

    await bot.send_message(admin_user_id, notification_message, parse_mode=ParseMode.MARKDOWN)

    await state.finish()

@dp.callback_query_handler(text='subchanneldone')
async def sub_channel_done(call: types.CallbackQuery):

    await bot.delete_message(call.from_user.id, call.message.message_id)

    user_id = call.from_user.id
    checker = database.check_user(user_id)

    channel_id = CHANNEL_ID
    if check_sub_channel(await bot.get_chat_member(chat_id=channel_id, user_id=user_id)):

        if checker:
            await bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç', reply_markup=btns.trial_time_kb())

        else:
            await bot.send_message(
                user_id,
                "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –≤–∞—à–µ –∏–º—è.",
                reply_markup=btns.ReplyKeyboardMarkup())
            await UserRegistration.getting_name_state.set()

    else:
        await bot.send_message(
            user_id,
            "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=inline_buttons.sub_channel())


@dp.message_handler(state=Settings.set_name)
async def change_name_db(message, state=Settings.set_name):
    user_answer = message.text

    await state.update_data(name=user_answer)

    ch_name = await state.get_data()
    user_id = message.from_user.id
    database.change_name(user_id, ch_name)
    await state.finish()
    await message.answer("–ò–º—è –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ",
                         reply_markup=btns.settings_kb())


@dp.message_handler(state=Settings.set_number)
async def change_number_db(message, state=Settings.set_number):
    user_answer = message.text

    await state.update_data(phone_number=user_answer)

    ch_number = await state.get_data()
    user_id = message.from_user.id
    database.change_number(user_id, ch_number)
    await state.finish()
    await message.answer("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
                         reply_markup=btns.settings_kb())

@dp.message_handler(state=Settings.set_setting, content_types=["text"])
async def set_name(message):
    user_answer = message.text
    user_id = message.from_user.id

    if user_answer == '–ò–∑–º–µ–Ω–∏—Ç –∏–º—è':
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è!")
        await Settings.set_name.set()

    elif user_answer == '–ò–∑–º–µ–Ω–∏—Ç –Ω–æ–º–µ—Ä':
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await Settings.set_number.set()

    elif user_answer == 'H–∞–∑–∞–¥':
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª –ù–ê–°–¢–†–û–ô–ö–ò",
                             reply_markup=btns.settings_kb())
        await dp.current_state(user=user_id).finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(content_types=["text"])
async def main_menu(message):
    user_id = message.from_user.id
    user_answer = message.text

    if message.text == '–†—É—Å—Å–∫–∏–π':

        status = 1
        database.set_status(user_id, status)

        start = datetime.now()
        end = start + timedelta(days=7)
        dpp = end.strftime("%d/%m/%y, %H:%M:%S")
        database.set_trial_sub(user_id, start, end)

        await message.answer(f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å \n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: \n\n{dpp}",
                             reply_markup=btns.main_menu_kb(), parse_mode="HTML")
        return


    photo_path = 'List_of_courses/course_photo.png'

    if user_answer == "üìù–û–ø–ª–∞—Ç–∞ –∑–∞ –∫—É—Ä—Å":
        await message.answer("–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—É—Ä—Å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å üí≥üí∞'",
                             reply_markup=course.pay_inline())

    elif user_answer == "üìö–ö–£–†–°–´":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –∫—É—Ä—Å–æ–≤",
                             reply_markup=course.list_courses())

    elif user_answer == "‚öôÔ∏è–ù–ê–°–¢–†–û–ô–ö–ê":
        await message.answer("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '‚öôÔ∏è–ù–ê–°–¢–†–û–ô–ö–ê'",
                             reply_markup=btns.settings_kb())

    elif user_answer == "üë§–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
                             reply_markup=btns.change_data_kb())
        await states.Settings.set_setting.set()

    elif user_answer == '–ö—É—Ä—Å "–ù–æ–≤–∞—è –Ø" üåüüéì':
        await bot.send_photo(photo=open(photo_path, 'rb'), chat_id=user_id, caption=welcome_msg, reply_markup=course.some_kb())




    elif user_answer == "–ù–ê–ó–ê–î":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
                             reply_markup=btns.main_menu_kb())
        await dp.current_state(user=user_id).finish()

    elif user_answer == "Ha–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
                             reply_markup=btns.main_menu_kb())
        await dp.current_state(user=user_id).finish()

    elif user_answer == "Ha–∑a–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
                             reply_markup=btns.main_menu_kb())
        await dp.current_state(user=user_id).finish()

    elif user_answer == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
                             reply_markup=btns.main_menu_kb())
        await dp.current_state(user=user_id).finish()



# –£–∑–± –ø–æ—Ç–æ–∫
# -----------------------------------------------------------------------------------------


    if user_answer == "O'zbek":


        status = 11
        database.set_status(user_id, status)

        start = datetime.now()
        end = start + timedelta(days=7)
        dpp = end.strftime("%d/%m/%y, %H:%M:%S")
        database.set_trial_sub(user_id, start, end)

        await message.answer(f"Bepul kursning \nAmal qilish muddati: \n\n{dpp} gacha",
                             reply_markup=uzbtns.uz_main_menu_kb(), parse_mode="HTML")
        return

    photo_path = 'List_of_courses/course_photo.png'

    if user_answer == "üìùKurs uchun to'lov":
        await message.answer("Kurs uchun to'lovni amalga oshirish uchun 'To'lov üí≥üí∞ tugmasini bosing'",
                             reply_markup=uzcourse.uz_pay_inline())

    elif user_answer == "üìöKurslar":
        await message.answer("Kursni tanlang!",
                             reply_markup=uzcourse.uz_list_courses())

    elif user_answer == "‚öôÔ∏èSozlamalar":
        await message.answer("Siz '‚öôÔ∏èSozlamalar' bo'limidasiz",
                             reply_markup=uzbtns.uz_settings_kb())

    elif user_answer == "üë§Profil":
        await message.answer("Bo'limni tanlang",
                             reply_markup=uzbtns.uz_change_data_kb())
        await states.Settings.set_setting.set()

    elif user_answer == '"Yangi Men" kursi üåüüéì':
        await bot.send_photo(photo=open(photo_path, 'rb'), chat_id=user_id, caption=welcome_msg_uz,
                             reply_markup=uzcourse.uz_some_kb())


    elif user_answer == "Ortga qaytishh":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
                             reply_markup=uzbtns.uz_main_menu_kb())
        await dp.current_state(user=user_id).finish()

    elif user_answer == "Ortg–∞ qaytish":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
                             reply_markup=uzbtns.uz_main_menu_kb())
        await dp.current_state(user=user_id).finish()

    elif user_answer == "Ortga q–∞ytish":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
                             reply_markup=uzbtns.uz_main_menu_kb())
        await dp.current_state(user=user_id).finish()

    elif user_answer == "Ortga qaytish":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
                             reply_markup=uzbtns.uz_main_menu_kb())
        await dp.current_state(user=user_id).finish()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—É—Ä—Å–∞ "–ù–æ–≤–∞—è –Ø"
@dp.callback_query_handler(lambda query: True)
async def course_fivedays(call: types.CallbackQuery):
    user_id = call.from_user.id

    # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å
    if call.data == "start":

        # status = 1
        # database.set_status(user_id, status)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–Ω–∏–µ" –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await bot.answer_callback_query(call.id)

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(0.5)
        await bot.send_message(call.from_user.id, text, reply_markup=btns.ReplyKeyboardRemove())

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, text2,
                               reply_markup=course.info_course())


    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    elif call.data == "next":

        # await bot.delete_message(call.message.chat.id, call.message.message_id)
        current_status = database.get_status(user_id)

        if current_status == 1:

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)

            await bot.send_message(call.from_user.id, "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ 1-–≥–æ –¥–Ω—è. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. üëá\n\n",
                                   reply_markup=course.get_youtube())

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, day_one)

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, emotions_text,
                                   reply_markup=inline_buttons.emotions_day_two())

        else:
            await bot.send_message(call.from_user.id, "–ö—É—Ä—Å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä? üìöüí°",
                                   reply_markup=course.day_two_yes())


    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –í—Ç–æ—Ä–æ–π –¥–µ–Ω—å
    if call.data == 'emotions_day_two' or call.data == 'emotions_day_two1' or call.data == 'day_two_yes':

        await bot.answer_callback_query(call.id)
        await bot.send_message(call.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –í—Ç–æ—Ä–æ–π –¥–µ–Ω—å –∫—É—Ä—Å–∞. üåü\n–°–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üöÄ')
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(86400)
        database.update_status(user_id)

        await asyncio.sleep(2)
        current_status = database.get_status(user_id)

        if current_status == 2:

            await asyncio.sleep(5)

            await bot.send_message(call.from_user.id, day_two_notif, reply_markup=inline_buttons.send_audio())

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(2)


    elif call.data == 'send_audio':
        current_status = database.get_status(user_id)

        if current_status == 2:
            audio_path = 'List_of_courses/1.ogg'
            audio_path2 = 'List_of_courses/2.ogg'

            if os.path.exists(audio_path) and os.path.exists(audio_path2):
                with open(audio_path, 'rb') as audio_file:
                    await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_AUDIO)
                    await bot.send_audio(call.from_user.id,
                                         audio_file,
                                         caption='–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è')
            await bot.answer_callback_query(call.id)
            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, '–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∞—É–¥–∏–æ 2-–≥–æ –¥–Ω—è. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. üëá',
                                   reply_markup=inline_buttons.send_task())

    # –ó–∞–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è
    elif call.data == 'send_task1':

        audio_path2 = 'List_of_courses/2.ogg'

        if os.path.exists(audio_path2) and os.path.exists(audio_path2):

            with open(audio_path2, 'rb') as audio_file4:

                await bot.answer_callback_query(call.id)
                await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_AUDIO)
                await asyncio.sleep(3)
                await bot.send_audio(call.from_user.id, audio_file4, caption='–ó–∞–¥–∞–Ω–∏–µ')
                await asyncio.sleep(3)
                await bot.send_message(call.from_user.id, emotions_text,
                                       reply_markup=inline_buttons.emotions_day_three())

        else:
            await bot.send_message(call.from_user.id, '–ö—É—Ä—Å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏. üîíüìö')
            await asyncio.sleep(0.5)
            await bot.send_message(call.from_user.id, '–ö—É—Ä—Å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω! üí´ –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—à–µ–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 2 –¥–Ω—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëâüéØ',
                                   reply_markup=inline_buttons.day_three_yes())


    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¢—Ä–µ—Ç–∏–π –¥–µ–Ω—å
    if (call.data == 'emotions_day_three' or
            call.data == 'emotions_day_three1' or call.data == 'day_three_yes'):

        await bot.send_message(call.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –¢—Ä–µ—Ç–∏–π –¥–µ–Ω—å –∫—É—Ä—Å–∞. üéâüìö\n–°–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üöÄ')
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(86400)
        database.update_status(user_id)

        await asyncio.sleep(2)
        current_status = database.get_status(user_id)

        if current_status == 3:

            await asyncio.sleep(5)
            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await bot.send_message(call.from_user.id, day_three_notif)

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_VIDEO)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üé•üëá',
                                   reply_markup=inline_buttons.day_three_video())
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, day_three_message,
                                   reply_markup=inline_buttons.day_three_ok())

        else:
            await bot.send_message(call.from_user.id, '–ö—É—Ä—Å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏. üìöüîí')
            await asyncio.sleep(0.5)
            await bot.send_message(call.from_user.id, '–ö—É—Ä—Å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω. –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—à–µ–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 3 –¥–Ω—è, –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëâüéì',
                                   reply_markup=inline_buttons.day_four_yes())

    # ---–ï—Å–ª–∏ –Ω–∞–∂–∞–ª "–ì–æ—Ç–æ–≤–∞"---
    elif call.data == 'yes':

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, day_three_yes_message)
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, '–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ü—Å–∏—Ö–æ–ª–æ–≥–∞. üí°üí≠\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëâüìù',
                               reply_markup=inline_buttons.get_task_three())

    # ---–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏–µ –∫ —Ç—Ä–µ—Ç—å–µ–º—É –¥–Ω—é---
    elif call.data == 'send_task3':
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, day_three_task)
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, emotions_text,
                               reply_markup=inline_buttons.emotions_day_four())


    elif call.data == 'emotions_day_four' or call.data == 'emotions_day_four1' or call.data == 'day_four_yes':


        await bot.delete_message(call.message.chat.id, call.message.message_id)

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(2)
        await bot.send_message(call.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å –∫—É—Ä—Å–∞!!! üéâüéì‚ú®')

        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(86400)
        database.update_status(user_id)

        await asyncio.sleep(2)
        current_status = database.get_status(user_id)

        if current_status == 4:

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, day_four_notif)

            audio_path2 = 'List_of_courses/day_four.ogg'

            if os.path.exists(audio_path2) and os.path.exists(audio_path2):
                with open(audio_path2, 'rb') as audio_file4:

                    await asyncio.sleep(0.5)

                    await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_AUDIO)
                    await bot.send_audio(call.from_user.id, audio_file4,
                                         reply_markup=inline_buttons.get_task_four())

            else:
                await bot.send_message(call.from_user.id,
                                       '–ö—É—Ä—Å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω. –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—à–µ–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 3 –¥–Ω—è, –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëâ',
                                       reply_markup=inline_buttons.day_five_yes())


    elif call.data == 'send_task4':

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, day_four_task)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, emotions_text,
                               reply_markup=inline_buttons.emotions_day_five())

    # ---–ü—è—Ç—ã–π –¥–µ–Ω—å---
    elif call.data == 'emotions_day_five' or call.data == 'emotions_day_five1' or call.data == 'day_five_yes':

        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.from_user.id,
                               '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ü—è—Ç—ã–π –¥–µ–Ω—å –∫—É—Ä—Å–∞. üåüüìö\n–°–∫–æ—Ä–æ –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üöÄ')
        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(86400)
        database.update_status(user_id)

        await asyncio.sleep(2)
        current_status = database.get_status(user_id)

        if current_status == 5:

            await asyncio.sleep(3)
            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await bot.send_message(call.from_user.id, day_five_notif)

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_VIDEO)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üé•üëá',
                                   reply_markup=inline_buttons.day_five_video())

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, day_five_text)
            await asyncio.sleep(5)
            await bot.send_message(call.from_user.id, discount_text)

        else:
            await bot.send_message(call.from_user.id, '–ö—É—Ä—Å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏. üìöüîí')
            await asyncio.sleep(0.5)
            await bot.send_message(call.from_user.id,
                                   '–ö—É—Ä—Å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω. –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—à–µ–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 4 –¥–Ω—è, –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëâüèÖ',
                                   reply_markup=inline_buttons.day_five_yes())

# ---–ï—Å–ª–∏ –Ω–∞–∂–∞–ª "–ù–µ –≥–æ—Ç–æ–≤–∞"---
    elif call.data == 'no':
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, day_three_no_message)
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–∞ –∫—É—Ä—Å')




# ------------------------------------------------------------------------------------------
# –£–∑–±–µ–∫ –ø–æ—Ç–æ–∫
    if call.data == "uz_start":

        # status = 10
        # database.set_status(user_id, status)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–Ω–∏–µ" –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await bot.answer_callback_query(call.id)

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(0.5)
        await bot.send_message(call.from_user.id, text_uz, reply_markup=btns.ReplyKeyboardRemove())

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, text2_uz,
                               reply_markup=uzcourse.uz_info_course())


    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    elif call.data == "uz_next":

        # await bot.delete_message(call.message.chat.id, call.message.message_id)
        current_status = database.get_status(user_id)

        if current_status == 11:

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)

            await bot.send_message(call.from_user.id, "1-kun videosini ochish uchun. Quyidagi tugmani bosing. üëá\n\n",
                                   reply_markup=uzcourse.uz_get_youtube())

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, day_one_uz)

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, emotions_text_uz,
                                   reply_markup=uz_inline_buttons.uz_emotions_day_two())

        else:
            await bot.send_message(call.from_user.id, "Kurs hali tugamagan. Kursni davom ettirmoqchimisiz? üìöüí°",
                                   reply_markup=uzcourse.uz_day_two_yes())

    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –í—Ç–æ—Ä–æ–π –¥–µ–Ω—å
    if call.data == 'uz_emotions_day_two' or call.data == 'uz_emotions_day_two1' or call.data == 'uz_day_two_yes':

        await bot.answer_callback_query(call.id)
        await bot.send_message(call.from_user.id,
                               "Siz kursning ikkinchi kuniga o'tdingiz. üåü\nSizga tez orada yangi xabar yuboriladi! üöÄ")
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(86400)
        database.update_status(user_id)

        await asyncio.sleep(2)
        current_status = database.get_status(user_id)

        if current_status == 2:
            await asyncio.sleep(5)

            await bot.send_message(call.from_user.id, day_two_notif_uz, reply_markup=uzcourse.uz_send_audio())

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(2)


    elif call.data == 'uz_send_audio':
        current_status = database.get_status(user_id)

        if current_status == 12:
            audio_path = 'List_of_courses/1.ogg'
            audio_path2 = 'List_of_courses/2.ogg'

            if os.path.exists(audio_path) and os.path.exists(audio_path2):
                with open(audio_path, 'rb') as audio_file:
                    await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_AUDIO)
                    await bot.send_audio(call.from_user.id,
                                         audio_file,
                                         caption="Kunnig temasi bo'yicha audio")
            await bot.answer_callback_query(call.id)
            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, 'Ikkinchi kunning audiosini ochish uchun. Tugmani bosing. üëá',
                                   reply_markup=uz_inline_buttons.uz_send_task())

    # –ó–∞–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è
    elif call.data == 'uz_send_task1':

        audio_path2 = 'List_of_courses/2.ogg'

        if os.path.exists(audio_path2) and os.path.exists(audio_path2):

            with open(audio_path2, 'rb') as audio_file4:

                await bot.answer_callback_query(call.id)
                await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_AUDIO)
                await asyncio.sleep(3)
                await bot.send_audio(call.from_user.id, audio_file4,
                                     caption='Kunning vazifasi')
                await asyncio.sleep(3)
                await bot.send_message(call.from_user.id, emotions_text_uz,
                                       reply_markup=uz_inline_buttons.uz_emotions_day_three())

        else:
            await bot.send_message(call.from_user.id, "Kurs hali tugamagan. Iltimos, oldingi kunlarni yakunlang. üîíüìö")
            await asyncio.sleep(0.5)
            await bot.send_message(call.from_user.id,
                                   "Kurs hali tugamagan. Agar siz oldingi kunni tugatgan bo'lsangiz, tugmani bosing üëâüéØ",
                                   reply_markup=uz_inline_buttons.uz_day_three_yes())

    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¢—Ä–µ—Ç–∏–π –¥–µ–Ω—å
    if (call.data == 'uz_emotions_day_three' or
            call.data == 'uz_emotions_day_three1' or call.data == 'uz_day_three_yes'):

        await bot.send_message(call.from_user.id,
                               "Siz kursning uchinchi kuniga o'tdingiz. üéâüìö\nSizga tez orada yangi xabar yuboriladi! üöÄ")
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(86400)
        database.update_status(user_id)

        await asyncio.sleep(2)
        current_status = database.get_status(user_id)

        if current_status == 13:

            await asyncio.sleep(5)
            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await bot.send_message(call.from_user.id, day_three_notif_uz)

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_VIDEO)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, "Videoga o'tish uchun, tugmani bosing üé•üëá",
                                   reply_markup=uz_inline_buttons.uz_day_three_video())
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, day_three_message_uz,
                                   reply_markup=uz_inline_buttons.uz_day_three_ok())

        else:
            await bot.send_message(call.from_user.id, "Kurs hali tugamagan. Iltimos, oldingi kunlarni yakunlang. üìöüîí")
            await asyncio.sleep(0.5)
            await bot.send_message(call.from_user.id,
                                   "Kurs hali tugamagan. Agar siz oldingi 2 kunni tugatgan bo'lsangiz, tugmani bosing üëâüéì",
                                   reply_markup=uz_inline_buttons.uz_day_four_yes())

    # ---–ï—Å–ª–∏ –Ω–∞–∂–∞–ª "–ì–æ—Ç–æ–≤–∞"---
    elif call.data == 'uz_yes':

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, day_three_yes_message_uz)
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id,
                               'Endi Psixologdan vazifa. üí°üí≠\n\nVazifani ochish uchun, tugmani bosing üëâüìù',
                               reply_markup=uz_inline_buttons.uz_get_task_three())


    # ---–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏–µ –∫ —Ç—Ä–µ—Ç—å–µ–º—É –¥–Ω—é---
    elif call.data == 'uz_send_task3':
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, day_three_task_uz)
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, emotions_text_uz,
                               reply_markup=uz_inline_buttons.uz_emotions_day_four())


    elif call.data == 'uz_emotions_day_four' or call.data == 'uz_emotions_day_four1' or call.data == 'uz_day_four_yes':

        await bot.delete_message(call.message.chat.id, call.message.message_id)

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(2)
        await bot.send_message(call.from_user.id, "Siz kursning to'rtinchi kuniga o'tdingiz!!!\nTez orada sizga habar yuboriladi! üöÄ üéì")

        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(86400)
        database.update_status(user_id)

        await asyncio.sleep(2)
        current_status = database.get_status(user_id)

        if current_status == 14:

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, day_four_notif_uz)

            audio_path2 = 'List_of_courses/day_four.ogg'

            if os.path.exists(audio_path2) and os.path.exists(audio_path2):
                with open(audio_path2, 'rb') as audio_file4:

                    await asyncio.sleep(0.5)

                    await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_AUDIO)
                    await bot.send_audio(call.from_user.id, audio_file4,
                                         reply_markup=uz_inline_buttons.uz_get_task_four())

            else:
                await bot.send_message(call.from_user.id,
                                       "Kurs hali tugamagan. Agar siz oldingi 3 kunni tugatgan bo'lsangiz, tugmani bosing üëâ",
                                       reply_markup=uz_inline_buttons.uz_day_five_yes())


    elif call.data == 'uz_send_task4':

        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, day_four_task_uz)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, emotions_text_uz,
                               reply_markup=uz_inline_buttons.uz_emotions_day_five())

    # ---–ü—è—Ç—ã–π –¥–µ–Ω—å---
    elif call.data == 'uz_emotions_day_five' or call.data == 'uz_emotions_day_five1' or call.data == 'uz_day_five_yes':

        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.from_user.id,
                               "Siz kursning beshinchi kuniga o'tdingiz. üåüüìö\nTez orada sizga habar yuboriladi! üöÄ")
        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(86400)
        database.update_status(user_id)

        await asyncio.sleep(2)
        current_status = database.get_status(user_id)

        if current_status == 15:

            await asyncio.sleep(3)
            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await bot.send_message(call.from_user.id, day_five_notif_uz)

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_VIDEO)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, "Videoni ko'rish uchun tugmani bosing üé•üëá",
                                   reply_markup=uz_inline_buttons.uz_day_five_video())

            await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            await asyncio.sleep(3)
            await bot.send_message(call.from_user.id, day_five_text_uz)
            await asyncio.sleep(5)
            await bot.send_message(call.from_user.id, discount_text_uz)

        else:
            await bot.send_message(call.from_user.id, 'Kurs hali tugamagan. Iltimos, oldingi kunlarni yakunlang. üìöüîí')
            await asyncio.sleep(0.5)
            await bot.send_message(call.from_user.id,
                                   "Kurs hali tugamagan. Agar siz oldingi 4 kunni tugatgan bo'lsangiz, tugmani bosing üëâüèÖ",
                                   reply_markup=uz_inline_buttons.uz_day_five_yes())

    # ---–ï—Å–ª–∏ –Ω–∞–∂–∞–ª "–ù–µ –≥–æ—Ç–æ–≤–∞"---
    elif call.data == 'uz_no':
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, day_three_no_message_uz)
        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
        await asyncio.sleep(3)
        await bot.send_message(call.from_user.id, discount_text_uz)


# ----------------------------------------------------------------------
    # –£–∑–± –ø–æ—Ç–æ–∫
@dp.message_handler(state=Uz_Settings.uz_set_name)
async def change_name_db(message, state=Uz_Settings.uz_set_name):
    user_answer = message.text

    await state.update_data(name=user_answer)

    ch_name = await state.get_data()
    user_id = message.from_user.id
    database.change_name(user_id, ch_name)
    await state.finish()
    await message.answer("Ism muvaffaqiyatli o'zgartirildi",
                         reply_markup=uzbtns.uz_settings_kb())


@dp.message_handler(state=Uz_Settings.uz_set_number)
async def change_number_db(message, state=Uz_Settings.uz_set_number):
    user_answer = message.text

    await state.update_data(phone_number=user_answer)

    ch_number = await state.get_data()
    user_id = message.from_user.id
    database.change_number(user_id, ch_number)
    await state.finish()
    await message.answer("Raqam muvaffaqiyatli o'zgartirildi",
                         reply_markup=uzbtns.uz_settings_kb())

@dp.message_handler(state=Uz_Settings.uz_set_setting, content_types=["text"])
async def set_name(message):
    user_answer = message.text
    user_id = message.from_user.id

    if user_answer == "Ismni o'zgratirish":
        await message.answer("Ism yuboring")
        await Uz_Settings.uz_set_name.set()

    elif user_answer == "Raqamni o'zgratirish":
        await message.answer("Telefon raqam yuboring")
        await Uz_Settings.uz_set_number.set()

    elif user_answer == 'Ortg–∞ qaytish':
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª –ù–ê–°–¢–†–û–ô–ö–ò",
                             reply_markup=uzbtns.uz_settings_kb())
        await dp.current_state(user=user_id).finish()





#https://www.youtube.com/channel/UCY9jGnDyqNCUUktm2ry-SFw

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
